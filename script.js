const motivationalQuotes = [
  "Motivasyon c√ºmlesi 1",
  "Motivasyon c√ºmlesi 2",
  "Motivasyon c√ºmlesi 3",
  "Motivasyon c√ºmlesi 4",
  "Motivasyon c√ºmlesi 5",
  "Motivasyon c√ºmlesi 6",
  "Motivasyon c√ºmlesi 7",
  "Motivasyon c√ºmlesi 8",
  "Motivasyon c√ºmlesi 9",
  "Motivasyon c√ºmlesi 10",
  "Motivasyon c√ºmlesi 11",
  "Motivasyon c√ºmlesi 12",
  "Motivasyon c√ºmlesi 13",
  "Motivasyon c√ºmlesi 14",
  "Motivasyon c√ºmlesi 15",
  "Motivasyon c√ºmlesi 16",
  "Motivasyon c√ºmlesi 17",
  "Motivasyon c√ºmlesi 18",
  "Motivasyon c√ºmlesi 19",
  "Motivasyon c√ºmlesi 20",
  "Motivasyon c√ºmlesi 21",
  "Motivasyon c√ºmlesi 22",
  "Motivasyon c√ºmlesi 23",
  "Motivasyon c√ºmlesi 24",
  "Motivasyon c√ºmlesi 25",
  "Motivasyon c√ºmlesi 26",
  "Motivasyon c√ºmlesi 27",
  "Motivasyon c√ºmlesi 28",
  "Motivasyon c√ºmlesi 29",
  "Motivasyon c√ºmlesi 30",
  "Motivasyon c√ºmlesi 31",
  "Motivasyon c√ºmlesi 32",
  "Motivasyon c√ºmlesi 33",
  "Motivasyon c√ºmlesi 34",
  "Motivasyon c√ºmlesi 35",
  "Motivasyon c√ºmlesi 36",
  "Motivasyon c√ºmlesi 37",
  "Motivasyon c√ºmlesi 38",
  "Motivasyon c√ºmlesi 39",
  "Motivasyon c√ºmlesi 40",
  "Motivasyon c√ºmlesi 41",
  "Motivasyon c√ºmlesi 42",
  "Motivasyon c√ºmlesi 43",
  "Motivasyon c√ºmlesi 44",
  "Motivasyon c√ºmlesi 45",
  "Motivasyon c√ºmlesi 46",
  "Motivasyon c√ºmlesi 47",
  "Motivasyon c√ºmlesi 48",
  "Motivasyon c√ºmlesi 49",
  "Motivasyon c√ºmlesi 50",
  "Motivasyon c√ºmlesi 51",
  "Motivasyon c√ºmlesi 52",
  "Motivasyon c√ºmlesi 53",
  "Motivasyon c√ºmlesi 54",
  "Motivasyon c√ºmlesi 55",
  "Motivasyon c√ºmlesi 56",
  "Motivasyon c√ºmlesi 57",
  "Motivasyon c√ºmlesi 58",
  "Motivasyon c√ºmlesi 59",
  "Motivasyon c√ºmlesi 60",
  "Motivasyon c√ºmlesi 61",
  "Motivasyon c√ºmlesi 62",
  "Motivasyon c√ºmlesi 63",
  "Motivasyon c√ºmlesi 64",
  "Motivasyon c√ºmlesi 65",
  "Motivasyon c√ºmlesi 66",
  "Motivasyon c√ºmlesi 67",
  "Motivasyon c√ºmlesi 68",
  "Motivasyon c√ºmlesi 69",
  "Motivasyon c√ºmlesi 70",
  "Motivasyon c√ºmlesi 71",
  "Motivasyon c√ºmlesi 72",
  "Motivasyon c√ºmlesi 73",
  "Motivasyon c√ºmlesi 74",
  "Motivasyon c√ºmlesi 75",
  "Motivasyon c√ºmlesi 76",
  "Motivasyon c√ºmlesi 77",
  "Motivasyon c√ºmlesi 78",
  "Motivasyon c√ºmlesi 79",
  "Motivasyon c√ºmlesi 80",
  "Motivasyon c√ºmlesi 81",
  "Motivasyon c√ºmlesi 82",
  "Motivasyon c√ºmlesi 83",
  "Motivasyon c√ºmlesi 84",
  "Motivasyon c√ºmlesi 85",
  "Motivasyon c√ºmlesi 86",
  "Motivasyon c√ºmlesi 87",
  "Motivasyon c√ºmlesi 88",
  "Motivasyon c√ºmlesi 89",
  "Motivasyon c√ºmlesi 90",
  "Motivasyon c√ºmlesi 91",
  "Motivasyon c√ºmlesi 92",
  "Motivasyon c√ºmlesi 93",
  "Motivasyon c√ºmlesi 94",
  "Motivasyon c√ºmlesi 95",
  "Motivasyon c√ºmlesi 96",
  "Motivasyon c√ºmlesi 97",
  "Motivasyon c√ºmlesi 98",
  "Motivasyon c√ºmlesi 99",
  "Motivasyon c√ºmlesi 100"
];

const motives = [
  "Bug√ºn harika bir g√ºn olabilir, yeter ki sen iste.",
  "Hayallerin i√ßin adƒ±m at!",
  "K√º√ß√ºk adƒ±mlar b√ºy√ºk farklar yaratƒ±r.",
  "Senin i√ßin her ≈üey m√ºmk√ºn.",
  "Kendine g√ºven!",
  "G√ºl√ºmse, √ß√ºnk√º hayat g√ºzel.",
  "ƒ∞yi ≈üeyler zaman alƒ±r.",
  "Bug√ºn senin g√ºn√ºn.",
  "Her sabah yeni bir ba≈ülangƒ±√ß.",
  "Zorluklar seni g√º√ßl√º yapar."
];

function newMotive() {
  const random = Math.floor(Math.random() * motives.length);
  document.getElementById("motiveText").innerText = motives[random];
}

const canvas = document.getElementById("wheel");
const ctx = canvas.getContext("2d");
const rewards = [
  "Milkshake", "2 Bira + Cips", "%10 ƒ∞ndirim",
  "≈ûansƒ±nƒ± Dene", "Sƒ±cak Kahve", "Bo≈ü üòÖ",
  "3 Top Dondurma", "√áekili≈ü Hakkƒ±", "Bir Tatlƒ±", "Bir Soƒüuk ƒ∞√ßecek"
];

let angles = [];
let startAngle = 0;
const arc = Math.PI / (rewards.length / 2);
for (let i = 0; i < rewards.length; i++) angles.push(i * arc);

function drawWheel() {
  for (let i = 0; i < rewards.length; i++) {
    ctx.beginPath();
    ctx.fillStyle = `hsl(${(i * 360) / rewards.length}, 70%, 60%)`;
    ctx.moveTo(250, 250);
    ctx.arc(250, 250, 200, angles[i], angles[i] + arc);
    ctx.lineTo(250, 250);
    ctx.fill();
    ctx.save();
    ctx.fillStyle = "white";
    ctx.translate(250, 250);
    ctx.rotate(angles[i] + arc / 2);
    ctx.textAlign = "right";
    ctx.fillText(rewards[i], 190, 10);
    ctx.restore();
  }
}
drawWheel();

let spinning = false;

function spin() {
  if (spinning) return;
  spinning = true;
  let rotation = Math.random() * 360 + 720;
  let duration = 7000;
  let start = null;
  const tick = (timestamp) => {
    if (!start) start = timestamp;
    const progress = timestamp - start;
    const ease = 1 - Math.pow(1 - progress / duration, 3);
    const angle = rotation * ease;
    canvas.style.transform = `rotate(${angle}deg)`;
    if (progress < duration) {
      requestAnimationFrame(tick);
    } else {
      const finalAngle = (angle % 360);
      const index = Math.floor((360 - finalAngle + 90) % 360 / (360 / rewards.length));
      setTimeout(() => {
        alert("Kazandƒ±n: " + rewards[index]);
        spinning = false;
      }, 100);
    }
  };
  requestAnimationFrame(tick);
}
